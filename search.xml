<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>User Story Map.md</title>
      <link href="/2022/04/23/User-Story-Map-md/"/>
      <url>/2022/04/23/User-Story-Map-md/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5学习笔记</title>
      <link href="/2022/01/01/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/01/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><p><strong>HTML</strong>全称是<strong>Hyper Text Markup Language</strong> 或 <strong>超文本标记语言</strong>, 是用来描述网页的标记语言, 一个HTML文件由多种网页元素组成, 比如图片, 链接, 文字, 声音, 视频等等.</p><h2 id="Web标准的构成"><a href="#Web标准的构成" class="headerlink" title="Web标准的构成"></a>Web标准的构成</h2><p>Web的标准由W3C组织制定. 一个页面主要由<strong>结构(Structure)</strong>, **表现(Presentation)<strong>和</strong>行为(Behavior)**三个方面构成:</p><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td><strong>结构(Structure)</strong></td><td>结构用于对网页元素进行整理和分类, 主要指 HTML</td></tr><tr><td><strong>表现(Presentation)</strong></td><td>表现用于设置网页元素的板式,颜色,大小等等外观样式, 主要指 CSS</td></tr><tr><td><strong>行为(Behavior)</strong></td><td>行为指网页模型的定义与交互的编写, 主要指 Javascript</td></tr></tbody></table><p>Web标准提出最优的网页体验方案是分离 <strong>结构</strong>, <strong>样式</strong> 和 <strong>行为</strong>. 简单来说就是: 结构写在HTML文件中, 样式写在CSS文件中, 行为写在Javascript文件中.</p><hr/><h1 id="HTML语法标准"><a href="#HTML语法标准" class="headerlink" title="HTML语法标准"></a>HTML语法标准</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li><p>html标签是由尖括号<code>&lt;&gt;</code>包裹的关键词.</p></li><li><p>html标签通常是成对出现的, 我们成为双标签. 这种标签的第一个是开始标签,第二个是结束标签. 例如 <code>&lt;input&gt;&lt;/input&gt;</code>.</p></li><li><p>有些特殊的标签也可以是单个标签. 例如 <code>&lt;br/&gt;</code>.</p></li></ul><h2 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h2><p>双标签关系可以分为两类: <strong>包含关系</strong>和<strong>并列关系</strong>.</p><p><strong>包含关系</strong>的意思是一对标签被包含在另一对标签的内部. 外部的标签被称为父标签, 内部的标签则是子标签. 例如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 包含关系, 以下head是title的父标签,而title是子标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>并列关系</strong>指两个标签不存在父与子的关系.例如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 并列关系, 以下head和body是并列的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-基本结构标签"><a href="#HTML-基本结构标签" class="headerlink" title="HTML 基本结构标签"></a>HTML 基本结构标签</h2><h3 id="骨架标签"><a href="#骨架标签" class="headerlink" title="骨架标签"></a>骨架标签</h3><p>每一个HTML文件都会有基本的结构标签(也称为骨架标签).</p><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;html&gt;&lt;/html&gt;</code></td><td>根标签</td><td>所有的内容(其他标签)必须写在根标签中</td></tr><tr><td><code>&lt;head&gt;&lt;/head&gt;</code></td><td>头部</td><td>head标签中必须要设置title标签</td></tr><tr><td><code>&lt;title&gt;&lt;/title&gt;</code></td><td>标题</td><td>网页的标题,会显示在浏览器的页面上方</td></tr><tr><td><code>&lt;body&gt;&lt;/body&gt;</code></td><td>主体</td><td>包含文档的所有主要内容</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        文件的主体</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong> html文档的后缀名必须是.html或.htm. 浏览器的作用就是读取html文档,并以网页的形式展示它们.</p><h3 id="结构标签"><a href="#结构标签" class="headerlink" title="结构标签"></a>结构标签</h3><p>用来规定页面结构的标签. 并没有实际作用, 但让代码看起来更清晰.</p><table><thead><tr><th>元素名</th><th>描述</th></tr></thead><tbody><tr><td><strong>header</strong></td><td>标记头部区域的内容 (用于页面或页面中的一块区域)</td></tr><tr><td><strong>footer</strong></td><td>标记脚步区域的内容 (用于页面或页面中的一块区域)</td></tr><tr><td><strong>section</strong></td><td>web页面中的一块独立区域</td></tr><tr><td><strong>article</strong></td><td>独立的文章内容</td></tr><tr><td><strong>aside</strong></td><td>相关内容或应用(常用于侧边栏)</td></tr><tr><td><strong>nav</strong></td><td>导航类辅助内容</td></tr></tbody></table><h2 id="网页开发工具"><a href="#网页开发工具" class="headerlink" title="网页开发工具"></a>网页开发工具</h2><h3 id="文档类型声明标签"><a href="#文档类型声明标签" class="headerlink" title="文档类型声明标签"></a>文档类型声明标签</h3><p><strong>文档类型声明声明标签</strong>的作用就是告诉浏览器使用哪个HTML版本来显示网页. 必须位于文档最上方 <html>标签之前, 它本身不是一个HTML标签, 仅仅是文档类型声明标签. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下代码的意思就是当前页面采用的是HTML5版本 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="语言声明标签"><a href="#语言声明标签" class="headerlink" title="语言声明标签"></a>语言声明标签</h3><p>用来定义当前文档显示的语言, 以下分别是中文和英文</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="meta描述性标签"><a href="#meta描述性标签" class="headerlink" title="meta描述性标签"></a>meta描述性标签</h3><p>用来描述当前HTML文件的一些信息, 一般用来做 SEO 即<strong>搜索引擎优化</strong>. 具体可描述的信息如下</p><ul><li><strong>keywords 关键词</strong></li></ul><p>声明与当前HTML页面相关的关键词.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;笔记, HTML5&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>desctiption 简介</strong></li></ul><p>对当前HTML页面的文字性描述.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;desctiption&quot;</span> <span class="attr">content</span>=<span class="string">&quot;个人的HTML5学习笔记&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>charset 字符集</strong></li></ul><p>规定本html文件使用的字符编码. 常用的字符集有: GB2312, BIG5, GBK和UTF-8, 其中UTF-8被称为万国码, 基本包含所有国家需要的字符.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="行内元素和块元素"><a href="#行内元素和块元素" class="headerlink" title="行内元素和块元素"></a>行内元素和块元素</h2><p>HTML元素可以依照占用的空间分为两种:</p><ul><li><strong>块元素</strong></li></ul><p>无论内容多寡, 都独立占据一行的空间. E.g. p标签, div标签</p><ul><li><strong>行内元素</strong></li></ul><p>多个行内元素允许共存于一行中. E.g. span标签</p><h2 id="注释和特殊字符"><a href="#注释和特殊字符" class="headerlink" title="注释和特殊字符"></a>注释和特殊字符</h2><p>注释不需要显示在页面中, 作用仅仅是帮我们理解和阅读源代码. 快捷键为<code>ctrl + /</code>.注释标签的格式如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 要注释的内容 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 空格符号, 可以分割文字 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span></span><br></pre></td></tr></table></figure><hr/><h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1><p>标签语义: 要记住每种标签的含义, 即这个标签是用来做什么的. 根据标签的含义,再合适的地方使用合理的标签,可以使页面结构更清晰.</p><h2 id="常用标签-1-标题标签"><a href="#常用标签-1-标题标签" class="headerlink" title="常用标签 1: 标题标签"></a>常用标签 1: 标题标签</h2><p>标题标签从大到小分6个等级, 即<code>&lt;h1&gt;</code> 到 <code> &lt;h6&gt;</code>. 它们依照重要性递减,即1级标签最重要, 6级标签最不重要. 加了标题的文字会加粗,字号也会变大. 标签会在页面中独占一行显示.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是2级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是3级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是4级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>我是5级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>我是6级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用标签-2-段落和换行标签"><a href="#常用标签-2-段落和换行标签" class="headerlink" title="常用标签 2: 段落和换行标签"></a>常用标签 2: 段落和换行标签</h2><p>在网页中, 如果我们要把文字有条理的展示出来,那么就需要把他们分成段落来展示. <code>&lt;p&gt;</code>标签用于定义段落, 可以将一大段文字分为若干个段落.段落和段落之间会有一个较大的空隙.</p><p>一个段落中的文字会一直显示到浏览器窗口的最右端才自动换行,如果需要手动换行需要用到换行标签. 换行后不会有太大的空隙. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1...<span class="tag">&lt;<span class="name">br</span>/&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用标签-3-文本格式标签"><a href="#常用标签-3-文本格式标签" class="headerlink" title="常用标签 3: 文本格式标签"></a>常用标签 3: 文本格式标签</h2><p>在网页中,有时需要为文字设置粗体, 斜体或下划线等效果, 这时就需要用到文本格式标签. 可以突出某些文字的重要性.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗的文字<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>同样是加粗的文字<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体的文字, 全称为emphasized text<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>同样是斜体的文字<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线文字<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>同样是删除线文字<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线文字, 代表inserted text<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>同样是下划线文字<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用标签-4-容器标签"><a href="#常用标签-4-容器标签" class="headerlink" title="常用标签 4: 容器标签"></a>常用标签 4: 容器标签</h2><p><strong>容器标签</strong>是一个盒子, 作用是用来装载其他内容和进行页面布局. <code>&lt;span&gt;</code>意味着跨度,跨距, <code>&lt;div&gt;</code>是division的缩写, 代表分割,分区. 通常可以理解他们没有什么区别。</p><p>但注意的是div独占用一行. span不会占用一行，它的宽度随内容而变化, 内容占多大宽度，span就有多宽。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>独占一行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>宽度随内容变化<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用标签-5-图像标签"><a href="#常用标签-5-图像标签" class="headerlink" title="常用标签 5: 图像标签"></a>常用标签 5: 图像标签</h2><p><strong>图像标签</strong><code>&lt;img&gt;</code>是单词image的缩写, 用于定义html页面中的图像, 它是一个单标签(自结束标签). </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像的URL或路径 alt=&quot;</span>在图片没有显示时,用文字代替&quot; <span class="attr">title</span>=<span class="string">&quot;提示信息&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">border</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>以下为一些图像标签的属性:</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片所在路径&#x2F;网址</td><td>用于指定图像的路径和文件名 (img必须要有这个属性)</td></tr><tr><td>alt</td><td>文本</td><td><strong>替换文本</strong>, 该属性中的文字可以在图片未正常显示时代替它.</td></tr><tr><td>title</td><td>文本</td><td><strong>提示文本</strong>, 鼠标悬停在图片上时会显示的文字</td></tr><tr><td>width</td><td>像素</td><td>设置图片的<strong>宽度</strong> (在实际开发中通常只会设置width或height中的一个, 另一个会自动等比缩放).</td></tr><tr><td>height</td><td>像素</td><td>设置图片的<strong>高度</strong></td></tr><tr><td>border</td><td>像素</td><td>设置图片边框的粗细</td></tr></tbody></table><h3 id="src属性的值"><a href="#src属性的值" class="headerlink" title="src属性的值"></a>src属性的值</h3><ul><li><strong>相对路径</strong> - 以引用文件所在位置为参考基础, 而生成的目录路径.</li></ul><table><thead><tr><th>相对路径分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>文件与html文件在同一级</td></tr><tr><td>下一级路径</td><td>&#x2F;</td><td>文件位于html文件下一级</td></tr><tr><td>上一级路径</td><td>..&#x2F;</td><td>文件位于html文件上一级</td></tr></tbody></table><ul><li><strong>绝对路径</strong> - 目录下的绝对位置, 通常从盘符开始的路径. 例如 <code>D/web/IMG/logo.gif</code> 或者完整的网页地址 <code>http://localhost:3000/images/logo.gif</code>.</li></ul><h2 id="常用标签-6-锚-x2F-超链接标签-anchor-tag"><a href="#常用标签-6-锚-x2F-超链接标签-anchor-tag" class="headerlink" title="常用标签 6: 锚&#x2F;超链接标签 anchor tag"></a>常用标签 6: 锚&#x2F;超链接标签 anchor tag</h2><p>作用是从一个页面链接到另一把页面, 当href属性指向的是一个文件或者压缩包,则会下载这个文件. 文本,图像,表格,音频,视频,按钮等等都可以添加超链接, 只需要把该元素包在超链接标签中即可. 超链接标签语法如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>锚链接的属性:</strong></p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于<strong>指定目标页面的地址</strong>, 可以是url地址或html文件的目录 (该属性必须存在)</td></tr><tr><td>target</td><td>用于指定链接<strong>页面的打开方式</strong>. 默认值为_self, 代表在当前页面打开, _blank代表在新窗口打开.</td></tr></tbody></table><p><strong>锚点</strong> 锚点链接也可以用作锚点,点击后可以快速的定位页面中的某个位置. 使用方法如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 锚点出现的位置, 设置href属性值为# + 目标元素id的形式, 点击后跳转到目标元素位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#锚点id&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 给要跳转的元素添加id属性, 属性值与&lt;a&gt;标签的href属性值相同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;锚点id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><hr/><h1 id="HTML常用标签-cont"><a href="#HTML常用标签-cont" class="headerlink" title="HTML常用标签(cont.)"></a>HTML常用标签(cont.)</h1><h2 id="常用标签-7-表格标签"><a href="#常用标签-7-表格标签" class="headerlink" title="常用标签 7: 表格标签"></a>常用标签 7: 表格标签</h2><p><strong>表格</strong>用于更直观的<strong>展示数据</strong>, 可以让数据显示的非常规整, 不是用来布局页面的. 一个表格包括多种标签:</p><ol><li><code>&lt;table&gt;&lt;/table&gt; </code> 用于定义<strong>表格</strong>的标签.</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code> 用于定义表格的<strong>行</strong>,是table row的缩写, 必须嵌套在<code>&lt;table&gt;</code>标签内.</li><li><code>&lt;td&gt;&lt;/td&gt;</code> 用于定义表格的<strong>单元格</strong>, 是table data的缩写, 必须嵌套在<tr>标签内.</li><li><code>&lt;th&gt;&lt;/th&gt;</code> 用于定义<strong>表头</strong>(第一行)的单元格,时table head的缩写, 表头单元格中的文字会自动居中加粗显示.</li></ol><p>以下是一个展示明星数据的表格:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>01<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>02<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表格标签的一些属性如下(表格标签的属性是不常用的,因为在开发中我们通常用css来设置):</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>align</td><td>left, center, right</td><td>整个表格位于包装容器的左&#x2F;中&#x2F;右部</td></tr><tr><td>border</td><td>数字字符串, e.g. “2”</td><td>边框的宽度</td></tr><tr><td>cellpadding</td><td>数字字符串, e.g. “1”</td><td>单元格中的内容与边框之间的间隙</td></tr><tr><td>cellspacing</td><td>数字字符串, e.g. “1”</td><td>单元格和单元格之间的距离</td></tr><tr><td>height&#x2F;width</td><td>数字字符串或百分比</td><td>整个表格的高&#x2F;宽</td></tr></tbody></table><h3 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h3><p><strong>表格结构标签</strong>并没有实际的显示效果, 只是让代码看起来更有结构</p><ol><li><thead></thead>代表table head, 用来定义表格的头部, 内部必须拥有<tr>标签,一般是整个表格的第一行</li><li><tbody></tbody>代表table body, 用于定义表格的体,用于存放数据主体.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>01<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>02<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p>在特殊情况下,我们可以把多个单元格合并为一个单元格. </p><ul><li>合并单元格的两种方式:</li></ul><table><thead><tr><th>方法</th><th>属性值</th><th>使用</th></tr></thead><tbody><tr><td><strong>跨行合并</strong>(上下合并)</td><td>rowspan&#x3D;”要合并单元格的个数”</td><td>给要合并的单元格的最上面一个单元格添加 rowspan 属性, 并指明要合并单元格的数量</td></tr><tr><td><strong>跨列合并</strong>(左右合并)</td><td>colspan&#x3D;”要合并单元格的数量”</td><td>跨列合并: 给要合并的单元格的最左边一个单元格添加 colspan 属性, 并指明要合并单元格的数量</td></tr></tbody></table><p><strong>注意</strong>: 合并后要删除多余出的单元格标签</p><h2 id="常用标签-8-列表标签"><a href="#常用标签-8-列表标签" class="headerlink" title="常用标签 8: 列表标签"></a>常用标签 8: 列表标签</h2><p><strong>列表标签</strong>是用来布局页面的,可以让页面更整洁有序. 根据使用场景不同, 略表可以分为: <strong>无序</strong>, <strong>有序</strong>和<strong>自定义列表</strong>.</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p><strong>无序列表</strong>原意为 <strong>unordered list</strong>, 一个列表包含的两个列表项目之间不存在顺序关系. 它由两种标签组成:</p><ol><li>使用<code>&lt;ul&gt;&lt;/ul&gt;</code>来声明无序列表. </li><li>列表中的项目使用<code>&lt;li&gt;&lt;/li&gt;</code>标签定义, 原意为 list item.</li></ol><p>以下为一个展示食物的无序列表:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>你喜欢的食物有哪些?<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>三文鱼<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>汉堡<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>三明治<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>: <code>&lt;ul&gt;</code>标签里只建议存放<code>&lt;li&gt;</code>标签, 而不建议包含其他标签. 而<code>&lt;li&gt;</code>标签中可以容纳任何元素, 相当于一个容器.</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有排列顺序的列表 也叫做 ordered list, 其各个列表项会按照一定顺序来定义. 和无序列表一样由两种标签组成:</p><ol><li>通过<code>&lt;ol&gt;</code>标签定义</li><li>列表项仍旧通过<code>&lt;li&gt;</code>标签定义.</li></ol><p><strong>注意</strong>: <code>&lt;ol&gt;</code>标签中不建议包含除了<code>&lt;li&gt;</code>之外的其他标签, 而<code>&lt;li&gt;</code>标签相当于一个容器,可以容纳任何元素.</p><h3 id="描述列表"><a href="#描述列表" class="headerlink" title="描述列表"></a>描述列表</h3><p><strong>描述列表</strong>也称为<strong>description list</strong>. 一个描述列表由两种标签组成:</p><ol><li>使用<code>&lt;dl&gt;&lt;/dl&gt;</code>声明描述列表.</li><li>列表包含对列表项的描述<code>&lt;dd&gt;</code>, 代表<strong>description</strong></li><li>列表包含一些术语<code>&lt;dt&gt;</code>代表<strong>description term</strong>.</li></ol><p>以下为一个展示媒体链接的的描述列表:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dt</span>&gt;</span>媒体<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;新浪主页&quot;</span>&gt;</span>新浪<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;腾讯主页&quot;</span>&gt;</span>腾讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;雅虎主页&quot;</span>&gt;</span>雅虎<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>: <code>&lt;dl&gt;</code>标签内只能包含 <code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>标签, 而后两者可以视作容器,容纳其他 任何标签.</p><hr/><h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><p>表单的目的是为了<strong>收集用户信息</strong>, 比如说用户名,密码等等信息. 一个完整的表单由<strong>表单域</strong>, <strong>表单控件</strong>和<strong>提示信息</strong>构成.</p><h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><p><strong>表单域</strong>指包含所有表单元素(表单控件和提示信息)的区域, 用<code>&lt;form&gt;&lt;/form&gt;</code>标签定义. 它的常用属性有:</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>action</td><td>url地址, 或静态文件路径</td><td>指定接收表单提交的数据的地址. 如果省略 action 属性，则 action 会被设置为当前页面.</td></tr><tr><td>method</td><td>“get” 或 “post”</td><td>提交表单数据时使用的http方法</td></tr><tr><td>name</td><td>名称</td><td>指定表单的名称, 用以区分一个页面里的多个表单域</td></tr></tbody></table><h2 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h2><p><strong>表单控件</strong>是一系列允许用户在表单中输入或者选择数据的控件. 表单控件用<code>&lt;input/&gt;</code>标签来声明, 它包含一个type属性, 该属性的值决定了表单控件的类型(文本, 按钮, 单选按钮等等). 以下是不同类型的表单控件:</p><table><thead><tr><th>属性值</th><th>说明</th><th>拥有的属性</th></tr></thead><tbody><tr><td>button</td><td><strong>点击按钮</strong></td><td><strong>value</strong> - 按钮类标签的value属性可以设置按钮上的文字</td></tr><tr><td>checkbox</td><td><strong>多选框</strong></td><td><strong>name</strong> - 多个radio要拥有同一个name,才能实现多选 <br/><strong>checked</strong> - 预设选项, 同样适用于radio标签</td></tr><tr><td>radio</td><td><strong>单选框</strong></td><td><strong>name</strong> - 多个radio要拥有同一个name,才能实现单选</td></tr><tr><td>file</td><td>定义输入字段和”浏览”按钮, 供文件上传</td><td></td></tr><tr><td>image</td><td><strong>图像</strong></td><td></td></tr><tr><td>text</td><td><strong>文本</strong>, 用户可以输入任意文字</td><td><strong>placeholder</strong>&#x3D;”预设文字”</td></tr><tr><td>password</td><td><strong>密码</strong>, 用户看不到输入的内容</td><td><strong>placeholder</strong>&#x3D;”预设文字”</td></tr><tr><td>reset</td><td><strong>重置按钮</strong>, 重置表单输入的数据到默认状态</td><td><strong>value</strong> - 按钮类标签的value属性可以设置按钮上的文字</td></tr><tr><td>submit</td><td><strong>提交按钮</strong>, 提交数据到服务器</td><td><strong>value</strong> - 按钮类标签的value属性可以设置按钮上的文字</td></tr><tr><td>email</td><td><strong>邮箱</strong>, 可以验证输入的文本是否符合email的结构</td><td></td></tr><tr><td>url</td><td><strong>网址</strong>, 可以验证输入的文本是否符合url的结构</td><td></td></tr><tr><td>number</td><td><strong>数字</strong>, 只能接收数字文本</td><td>max, min, step</td></tr><tr><td>range</td><td><strong>滑块</strong></td><td>min, max</td></tr><tr><td>search</td><td><strong>搜索框</strong></td><td></td></tr></tbody></table><p>以下是一个表单的代码实现:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        文件: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;文件&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 文本: 可以输入任何文字 --&gt;</span></span><br><span class="line">        文本: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;预设文字&quot;</span> <span class="attr">name</span>=<span class="string">&quot;文本&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 密码: 用户看不到输入的密码 --&gt;</span></span><br><span class="line">        密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;预设文字&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 单选按钮: 可以实现多选一, 只有多个radio标签拥有相同的name属性时才能实现效果 --&gt;</span></span><br><span class="line">        单选按钮: </span><br><span class="line">    选项1 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;单选&quot;</span> <span class="attr">value</span>=<span class="string">&quot;选项1&quot;</span>&gt;</span> </span><br><span class="line">    选项2 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;单选&quot;</span> <span class="attr">value</span>=<span class="string">&quot;选项2&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 多选按钮: 实现多选效果, 只有多个checkbox标签拥有相同的name属性时才能实现效果 --&gt;</span></span><br><span class="line">        多选框: </span><br><span class="line">            选项1<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;多选&quot;</span> <span class="attr">value</span>=<span class="string">&quot;选项1&quot;</span>&gt;</span> </span><br><span class="line">            选项2<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;多选&quot;</span> <span class="attr">value</span>=<span class="string">&quot;选项2&quot;</span>&gt;</span> </span><br><span class="line">            选项3<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;多选&quot;</span> <span class="attr">value</span>=<span class="string">&quot;选项3&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        图像: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span>&gt;</span> </span><br><span class="line">        </span><br><span class="line">       <span class="comment">&lt;!-- 普通按钮通常搭配js代码来使用 --&gt;</span></span><br><span class="line">        普通按钮: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        重置按钮: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        提交按钮: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h3><p>Label标签可以绑定一个表单元素, 当点击<code>&lt;label&gt;</code>标签内的文字时, 浏览器就会自动聚焦到相应的表单元素上. <code>&lt;label&gt;</code>元素中的<strong>for属性</strong>应当与所链接表单元素的<strong>id属性</strong>相同. 如下例,当我们点击文字”用户名”或”密码”的时候, 浏览器就会自动聚焦到id为”username”或”password”的表单元素.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码: <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="select-下拉标签"><a href="#select-下拉标签" class="headerlink" title="select 下拉标签"></a>select 下拉标签</h3><p>该标签可以用来定义下拉列表. 列表中的每一个选项用<code>&lt;option&gt;&lt;/option&gt;</code>标签来定义. 一个<code>&lt;select&gt;</code>标签至少包含一对<code>&lt;option&gt;</code>. 给<code>&lt;option&gt;</code>标签添加 selected 属性即可设置为默认选项. 以下是一个下拉标签的代码实现:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;下拉菜单&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="textarea-文本域标签"><a href="#textarea-文本域标签" class="headerlink" title="textarea 文本域标签"></a>textarea 文本域标签</h3><p>当要输入的文字较多的情况下, 我们就不能再使用文本框标签了, 此时我们应使用<code>&lt;textarea&gt;</code>标签. 在表单中,文本域用于定义多行文本输入的控件.</p><p>文本域标签的属性有 (实际开发中不经常使用, 通常使用css):</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>cols</td><td>数字字符串</td><td>列数</td></tr><tr><td>rows</td><td>数字字符串</td><td>行数</td></tr></tbody></table><hr/><h1 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h1><table><thead><tr><th>标签</th><th>说明</th><th>演示</th></tr></thead><tbody><tr><td>video</td><td>HTML5的新标签, 定义一个视频或者影片.</td><td></td></tr><tr><td>audio</td><td>HTML5的新标签, 定义了声音内容.</td><td></td></tr><tr><td>iframe</td><td>被用来在当前 HTML 文档中嵌入另一个文档.</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript学习笔记</title>
      <link href="/2022/01/01/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/01/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h1><p>JS是一种运行在客户端的脚本语言, 也就是说它不需要编译, 运行过程中由 JS解释器(引擎)逐行进行解释并执行. 常见的一种JS解释器是chrome的V8.</p><h2 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h2><p>JS由三部分组成</p><ul><li><em><strong>ECMAScript</strong></em> - JS所遵守的语法标准, 由ECMA国际进行标准化, 它规定了JS的编程语法和基础核心知识, 是所有浏览器厂商共同遵守的一套JS 语法工业标准. 两种ECMAScript语言的实现和扩展分别为JavaScript和Jscript, 分别由网景和微软开发.</li><li><em><strong>Document Object Model</strong></em> (简称DOM) - 文档对象模型. 是W3C组织推荐的处理可标记语言的标准编程接口, 通过DOM提供的接口可以对页面上的各种元素进行操作 (大小, 位置, 颜色等). </li><li><em><strong>Brower Object Model</strong></em> (简称BOM) - 浏览器对象模型, 他提供了独立于内容的, 可以与浏览器窗口进行互动的对象结构, 通过BOM可以操作浏览器窗口, 比如说弹出框,控制浏览器跳转,获取分辨率等.</li></ul><h2 id="在HTML中使用JavaScript"><a href="#在HTML中使用JavaScript" class="headerlink" title="在HTML中使用JavaScript"></a>在HTML中使用JavaScript</h2><p>有三种在在HTML文件中使用JS代码的方法:</p><ol><li><strong>内嵌式</strong> - 写在 <code>&lt;script&gt;&lt;/script&gt;</code>标签中</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;page launched&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>行内式</strong> - 直接写在html的元素属性中, 仅在特殊情况下使用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;点击&#x27;</span> <span class="attr">onclick</span>=<span class="string">&#x27;alert(&quot;clicked&quot;)&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>引入式</strong> - JS代码单独写在以<code>.js</code>后缀结尾的文件中, 并在HTML文件中引入. 适用于代码量大的情况, 和文件级别的代码复用.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注释方法"><a href="#注释方法" class="headerlink" title="注释方法"></a>注释方法</h2><ul><li><strong>单行注释</strong> - 把<code>//</code>放在要注释内容之前. 快捷键为<code>ctrl + /</code>.</li><li><strong>多行注释</strong> - 把注释内容放在 <code>/**/</code>之间. 快捷键为<code>shift + alt + a</code>.</li></ul><h2 id="输入-x2F-输出内容"><a href="#输入-x2F-输出内容" class="headerlink" title="输入&#x2F;输出内容"></a>输入&#x2F;输出内容</h2><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(要输出的内容)</td><td>用浏览器弹窗来输出信息</td><td>浏览器</td></tr><tr><td>console.log(用输出的内容)</td><td>输出内容到浏览器的控制台</td><td>浏览器</td></tr><tr><td>prompt(提示信息, palceholder信息)</td><td>浏览器弹出输入框, 用户可以输入内容</td><td>浏览器</td></tr></tbody></table><hr/><h1 id="JS的变量"><a href="#JS的变量" class="headerlink" title="JS的变量"></a>JS的变量</h1><p>定义: 变量是一个用于存放数据的容器. 我们可以通过变量名来获取所其所存储的数据, 或对数据进行修改. </p><p>本质: 创建变量就是程序在内存中申请一块用于存放数据的空间, 变量名就是指向该内存位置的指针.</p><h2 id="变量的创建"><a href="#变量的创建" class="headerlink" title="变量的创建"></a>变量的创建</h2><p><strong>变量的创建包括两步:</strong> </p><ol><li><strong>声明变量</strong>  - 使用关键词<code>let</code>或<code>const</code>关键词来声明变量, 关键词后面跟着<strong>变量名</strong>.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> var1; <span class="comment">// 这里声明变量名为 var1, 我们要通过调用该变量名访问变量占用的内存空间</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>赋值</strong> - 把数据存入该变量所划分的内存空间中, 未赋值前该变量的值为<code>undefined</code>.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>其他的要点:</strong></p><ul><li><strong>声明和赋值</strong> - 可以同时进行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> var1 = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>变更变量</strong> - 可以重新赋值给某个变量, 以此改变它包含的数据.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var1最开始是Number类型, 重新赋值后变为String类型</span></span><br><span class="line"><span class="keyword">let</span> var1 = <span class="number">1</span>;</span><br><span class="line">var1 = <span class="string">&quot;string&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>同时声明多个变量</strong> - 只在第一个变量前加声明关键词, 两个变量之间用逗号分开, 最后一个变量赋值结束后用<code>;</code>结尾.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> var1 = <span class="number">1</span>,</span><br><span class="line">    var2 = <span class="number">2</span>,</span><br><span class="line">    var3 = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>全局变量</strong> - 当不使用关键字来进行声明, 而直接进行赋值, 则变量就会提升为全局变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h2><p>当在Javascript代码中对变量命名, 应遵守以下规范:</p><ol><li>只能包含英文字母, 数字, 下划线 和 <code>$</code> 美元符号</li><li>严格区分大小写</li><li>不能以数字开头</li><li>不能使用关键字, 保留字. 比如: var, for, while, etc.</li><li>使用小驼峰命名法. 即第一个单词的首字母小写, 其他单词的首字母大写.</li></ol><hr/><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><strong>为什么需要数据类型?</strong> 不同的数据所需占用的内存不同, 定义不同的数据类型能便于把数据分为所需内存大小不同的数据, 利于充分的利用存储空间.</p><p><strong>JS中的数据类型是怎么确定的?</strong> JS是弱类型(动态类型)语言, 意味着我们不提前声明变量的数据类型, 变量的数据类型会在赋值完成后确定. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在未赋值时变量为undefined类型</span></span><br><span class="line"><span class="keyword">let</span> var1;</span><br><span class="line"><span class="comment">// 赋值为数字时, 数据类型变为Number</span></span><br><span class="line">var1 = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 赋值为字符串时, 数据类型变为String</span></span><br><span class="line">var1 = <span class="string">&quot;string&quot;</span>;</span><br></pre></td></tr></table></figure><p>JS中的数据类型可以大致分为两类: <strong>原始&#x2F;基本数据类型</strong> 和 <strong>引用数据类型</strong>.</p><h2 id="基本数据类型-6种"><a href="#基本数据类型-6种" class="headerlink" title="基本数据类型(6种)"></a>基本数据类型(6种)</h2><p>原始&#x2F;基础数据类型有: <strong>Number, String, Boolean, Null, Undefined, Symbol.</strong></p><h3 id="Number数字型"><a href="#Number数字型" class="headerlink" title="Number数字型"></a>Number数字型</h3><p>又包含整数和浮点数型. 数字默认为十进制,在数字前加<code>0</code>则为八进制, 在数字前加<code>0x</code>则为十六进制. 数字型的最大值和最小值可以用<code>Number.MAX_VALUE</code>或<code>Number.MIN_VALUE</code>来表示. 数字型的无穷大和无穷小可以用<code>Infinity</code>或<code>-Infinity</code>表示.非数值可以用<code>NaN</code>表示, 代表 Not a number.</p><ul><li>判断一个变量是否为数字型的方法:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> var1 = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 返回值是false则为数字型, 否则不是数字型</span></span><br><span class="line"><span class="built_in">isNaN</span>(var1);</span><br></pre></td></tr></table></figure><h3 id="String字符串型"><a href="#String字符串型" class="headerlink" title="String字符串型"></a>String字符串型</h3><p>字符串是被引号包围的任意文本, 可以是双引号或单引号. 一个字符串可以通过 <code>+</code> 来和任意数据类型进行拼接, 生成新的字符串.</p><ul><li>获取字符串的长度的方法:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> var1 = <span class="string">&#x27;String&#x27;</span>;</span><br><span class="line"><span class="comment">// 通过调用变量的length属性来读取字符串的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(var1.<span class="property">length</span>);</span><br></pre></td></tr></table></figure><h3 id="Boolean布尔型"><a href="#Boolean布尔型" class="headerlink" title="Boolean布尔型"></a>Boolean布尔型</h3><p>布尔型数据的值只能是 <strong>true</strong> 或 <strong>false</strong>. 在 Javascript, true 和 false 可以分别被视为 1 或 0.</p><h3 id="Undefined未定义数据类型"><a href="#Undefined未定义数据类型" class="headerlink" title="Undefined未定义数据类型"></a>Undefined未定义数据类型</h3><p>在声明一个变量, 但不给其赋值的情况下, 该变量的值就是 undefined</p><h3 id="Null空值"><a href="#Null空值" class="headerlink" title="Null空值"></a>Null空值</h3><p>当给一个变量赋值 <code>null</code>后, 该变量的值为空.</p><h2 id="基本数据类型的一些方法"><a href="#基本数据类型的一些方法" class="headerlink" title="基本数据类型的一些方法"></a>基本数据类型的一些方法</h2><p><strong>检测变量的数据类型</strong> - <code>typeof</code> 可以帮我们检测一个变量的数据类型.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> var1 = <span class="number">1</span>, var2 = <span class="string">&quot;String&quot;</span>, var3 = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> var1) <span class="comment">//输出结果为: number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> var2) <span class="comment">//输出结果为: string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> var3) <span class="comment">//输出结果为: boolean</span></span><br></pre></td></tr></table></figure><p><strong>数据类型的转换</strong> - 把一种数据类型的变量转换为零一种数据类型.</p><ol><li><strong>把任意数据类型转换为字符串</strong> - 可以通过 <code>toString()</code>, <code>String()</code> 函数或加号拼接的方法来进行转换.</li><li><strong>字符串型转换为数字型</strong> - 可以通过 <code>parseInt()</code> 函数来转换为整数型, <code>parseFloat()</code> 函数转换为浮点型, 或 <code>Number()</code> 函数转换为数字型.</li><li>其他类型转换为布尔值类型 - 通过<code>Boolean()</code> 函数进行转换. 以下值会被转为 false, 比如: ‘’, 0, NaN, null, undefined. 其余的值则会被转为 true.</li></ol><hr/><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算数运算所使用的符号, 用于执行两个变量或者值的算术运算. 以下为 JS 中的算术运算符:</p><table><thead><tr><th>运算符</th><th>解释</th><th>案例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td></td></tr><tr><td>-</td><td>减</td><td></td></tr><tr><td>*</td><td>乘</td><td></td></tr><tr><td>&#x2F;</td><td>除</td><td></td></tr><tr><td>%</td><td>取余数</td><td></td></tr></tbody></table><h2 id="加等-减等-乘等-除等"><a href="#加等-减等-乘等-除等" class="headerlink" title="加等, 减等, 乘等, 除等"></a>加等, 减等, 乘等, 除等</h2><p>如果需要在当前变量值的基础上, 进行加减乘除. 该运算符必须和变量一起使用. 该</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>++</td><td>递增1 (运算符可以放在变量之前或变量之后, 放在之前则先递增&#x2F;递减, 再返回值. 放在变量之后则为先返回值, 再进行递增&#x2F;递减.)</td><td></td></tr><tr><td>–</td><td>递减1 (同上)</td><td></td></tr><tr><td>+&#x3D;</td><td>递增指定值后, 再赋值给变量</td><td></td></tr><tr><td>-&#x3D;</td><td>递减指定值后, 再赋值给变量</td><td></td></tr><tr><td>*&#x3D;</td><td>乘等指定值后, 再赋值给变量</td><td></td></tr><tr><td>&#x2F;&#x3D;</td><td>除等指定值后, 再赋值给变量</td><td></td></tr><tr><td>%&#x3D;</td><td>进行指定值的取余后,再赋值</td><td></td></tr></tbody></table><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th>运算符</th><th>说明</th><th>案例</th><th>结果</th></tr></thead><tbody><tr><td>&lt;</td><td>小于</td><td>1&lt;2</td><td>true</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td><td>1&lt;&#x3D;2</td><td>true</td></tr><tr><td>&gt;</td><td>大于</td><td>1&gt;2</td><td>false</td></tr><tr><td>&gt;&#x3D;</td><td>大于或等于</td><td>1&gt;&#x3D;2</td><td>false</td></tr><tr><td>&#x3D;&#x3D;</td><td>判断值是否相等</td><td>true &#x3D;&#x3D; 1</td><td>true</td></tr><tr><td>&#x3D;&#x3D;&#x3D;</td><td>先判断数据类型是否一致, 在判断值是否相等</td><td>true &#x3D;&#x3D;&#x3D; 1</td><td>false</td></tr><tr><td>!&#x3D;</td><td>判断值是否不相等</td><td>true !&#x3D; 0</td><td>true</td></tr><tr><td>!&#x3D;&#x3D;</td><td>先判断数据类型是否不一致, 在判断值是否不相等</td><td>true !&#x3D;&#x3D;&#x3D; 0</td><td>true</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>如果运算符两边皆为true, 则最终值为true</td></tr><tr><td>||</td><td>逻辑或</td><td>如果预算符两边有任意一边为true, 则最终只为true</td></tr><tr><td>!</td><td>逻辑非</td><td>反转布尔值</td></tr></tbody></table><hr/><h1 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h1><p>控制语句可以让我们决定要执行的代码流程分支.</p><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><p>我们可以使用 <code>if</code> 来决定要执行的代码块. 具体使用方法如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 如果条件1为true时, 会执行的代码块</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">// 如果条件1为false, 而条件2为true时会执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果之前所有的条件皆返回false, 则会执行的代码块, else永远放在最后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Switch-语句"><a href="#Switch-语句" class="headerlink" title="Switch 语句"></a>Switch 语句</h2><p>switch 语句通过对比表达式的值与每个 case 的值, 来执行不同的代码块. 使用方法如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果表达式和case值相等, 就会执行对应的代码块. 没有匹配的话则会执行default代码块. 每个代码块后必须跟 break, 否则就算已经匹配成功, 对比还会进行下去.</span></span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// do something...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// do something...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">        <span class="comment">// do something...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="comment">// 默认代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>JS 支持多种类型的循环语句:</p><ul><li><strong>for循环</strong>, 其中语句1只在整个循环开始前执行一次. 语法2判断循环结束的条件, 该判断为 <code>true</code> 则循环结束. 语句3会在每次循环后执行. 要执行的代码块在语句2和3之间执行.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>) &#123;</span><br><span class="line">     <span class="comment">// 要执行的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>break</code> 在循环代码块中使用可以结束循环.</p><p><code>continue</code> 在循环代码块中使用可以跳过此次循环, 进入下一轮循环.</p><ul><li><strong>for…in…循环</strong>, 用来遍历拥有可迭代属性的对象. 比如数组或者对象的属性.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> list)&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​注意: 开发中不建议使用 for&#x2F;in </p><ul><li><strong>for…of…循环</strong>, 可以完美替代 for&#x2F;in 类似, 用来遍历拥有可迭代属性的对象. 比如数组或者对象的属性.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">of</span> list)&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>while循环</strong>, 在判断语句为true的情况下, 一直循环下去, 知道判断语句返回false为止.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(判断语句)&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>do…while循环</strong>, 和while循环相似, 区别是代码块会至少执行一次.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">while</span> (判断语句);</span><br></pre></td></tr></table></figure><h1 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array 数组"></a>Array 数组</h1><p>数组是一组数据的集合. 它允许我们在同一个变量中存储多个任意类型的值. 不同于强类型语言如 JAVA,在弱类型语言 JS 的数组中我们可以存放不同类型的元素. 数组中的元素在内存的物理位置上也是相邻的. </p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>可以通过两种方法创建数组:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1. 使用 new 关键词来创建数组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="comment">// 方法2. 使用方括号来声明空数组</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [];</span><br><span class="line"><span class="comment">// 方法2.1 在声明数组时, 可以同时添加初始元素</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;str&quot;</span>];</span><br></pre></td></tr></table></figure><h2 id="获取数组内元素"><a href="#获取数组内元素" class="headerlink" title="获取数组内元素"></a>获取数组内元素</h2><p>我们可以通过 <code>数组名[index]</code>来获取数组内指定下标的元素. 元素下标从0开始, 最后一个元素的下标是 <code>数组长度-1</code>. 如果指定的下标不存在数据, 则返回 <code>undefined</code>.</p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p><strong>for循环遍历</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用 for&#x2F;of遍历</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(elem)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用arr的map方法遍历</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">map</span>(<span class="function">(<span class="params">elem, index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(elem, index);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="function-函数"><a href="#function-函数" class="headerlink" title="function 函数"></a>function 函数</h1><p><strong>函数的声明:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过function关键词声明</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2.</span>..)&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. </span></span><br><span class="line"><span class="keyword">const</span> 函数名 = <span class="keyword">function</span>(<span class="params">形参</span>)&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数的调用</strong>是通过 <code>函数名(实参1, 实参2...)</code>来调用.</p><p><strong>函数的返回值</strong>: 当有 函数体中有 return 关键字, 则返回 return 后面的数据. 否则返回 undefined.</p><p><strong>函数的参数</strong>: 函数声明时的参数时形参. 函数调用是传入的参数是实参. 除了调用形参来访问传入的数据, 我们还可以在函数体内通过调用 <code>arguments</code>对象来访问传入的参数. 比如arguments[0] 就可以让我们访问传入的第一个参数.</p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>作用域限定了一个变量的可被使用的范围, 当我们离开这个范围, 这个变量就不能再被调用了. 作用域的使用提升了程序逻辑的局部性, 增强了程序的可靠性, 减少了变量名之间的冲突. </p><p><strong>JS作用域(es6之前)</strong>: </p><pre><code>1. 全局作用域: 整个个sctipt标签, 或者一个独立的js文件. 声明在script标签中, 或者js文件中(函数外部)的变量就是全局变量. 全局变量只在浏览器关闭时被销毁, 比较占用资源1. 局部作用域  函数内部就是局部作用域, 声明在函数内部的变量只在可以在函数内部使用, 这个变量也叫局部变量. 局部变量会在函数运行完成后销毁.</code></pre><p><strong>JS作用域(es6之后)</strong>: </p><ol><li>块级作用域 - 类似于Java中的作用域. 函数使用范围和销毁由声明的位置决定, 即声明在控制语句中, 那么就只能在这个控制语句中使用, 控制语句运行完成时即销毁. 声明在函数中, 那就只能在这个函数运行时被调用, 函数运行结束即销毁.</li></ol><h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><p>JS代码由浏览器的JS解析器来执行. 解析器运行JS代码分为两步: <strong>预解析</strong>和<strong>代码执行</strong>. </p><ol><li>在进行预解析时, 会把所有的 var声明的变量还有 function提升到当前作用域的最前面. 所以预解析又包含变量预解析(**变量提升)**和函数预解析(<strong>函数提升</strong>).<ol><li><strong>变量提升</strong> - 即变量的声明会被挪到所有代码的最前面, 但是不会把赋值同时提升. 这造成的结果就是, 如果我们把一个变量的输出放在声明之前, 就看到 <code>undefined</code>被输出. </li><li><strong>函数提升</strong> - 即函数的声明会被挪到所有代码的最前面. 这样造成的结果就是, 即使我们在函数被声明之前调用这个函数, 这个函数会被正常运行.</li></ol></li><li>预解析完成后, js解析器才会按从上往下的顺序对代码进行执行.</li></ol><h1 id="JS对象"><a href="#JS对象" class="headerlink" title="JS对象"></a>JS对象</h1><p>现实中的对象指的是现实中存在的物体. JS的对象由一些<strong>属性</strong>和<strong>函数</strong>组成.</p><p><strong>创建对象的方法(三种):</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过字面量来创建对象, 该对象包含属性id, name, 还有方法 printID</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">    <span class="attr">printID</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过 new Object() 创建</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">id</span> = <span class="number">0</span>;</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;obj&quot;</span>;</span><br><span class="line">obj.<span class="property">printID</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 通过构造函数创建, 之前两种方法每次只能创建一个对象, 效率太低. 用构造函数可以用来重复创建相似对象, 效率大大提升. </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">id, name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">printID</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.1 通过构造函数创建对象实例</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">0</span>, <span class="string">&quot;p1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>, <span class="string">&quot;p2&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p><strong>调用对象的属性</strong>: 可以用过<code>对象名.属性名</code>和<code>对象名[&#39;属性名&#39;]</code>两种方式调用.</p></li><li><p><strong>通过构造函数创建对象时, <code>new</code>关键字的执行过程:</strong></p><ol><li><p>先在内存中创建了一个空的对象 <code>&#123;&#125;</code>.</p></li><li><p>然后this就会指向刚创建的空对象.</p></li><li><p>然后就会执行构造函数内的代码, 为空对象添加属性和方法.</p></li><li><p>返回这个对象</p></li></ol></li><li><p><strong>遍历对象的方法:</strong></p></li></ul><p>使用 <strong>for&#x2F;in</strong> 来遍历对象, 以此来查看对象中有哪些属性和属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用for/in来遍历对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">    <span class="attr">printID</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">//属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]) <span class="comment">//属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>JS 中的对象分为三种: 自定义对象, 内置对象, 浏览器对象. 前两者是ECMAScript规定的基础内容, 第三者属于JS独有的. </p><p><strong>内置对象</strong>是JS自带的对象, 为开发者提供一些常用的必要功能. 常用的内置对象有 Math, Date, Array, String等等. 通过 <code>https://developer.mozilla.org/en-US/</code> 我们可以查询自带对象的API. </p><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><p>Math中自带一些常用的数学常数和方法:</p><ul><li>常数</li></ul><table><thead><tr><th>常数</th><th>调用</th><th>说明</th></tr></thead><tbody><tr><td>$\pi$</td><td>Math.PI</td><td>圆周率. i.e. 3.1415926…</td></tr><tr><td>$e$</td><td>Math.E</td><td>自然常数</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th>方法</th><th>调用</th><th>说明</th></tr></thead><tbody><tr><td>绝对值</td><td>Math.abs($x$)</td><td></td></tr><tr><td>向上取整</td><td>Math.ceil($x$)</td><td></td></tr><tr><td>向下取整</td><td>Math.floor($x$)</td><td></td></tr><tr><td>找一组数中的最大值</td><td>Math.max($x_1, x_2…x_n$)</td><td></td></tr><tr><td>找一组数中的最小值</td><td>Math.min($x_1, x_2…x_n$)</td><td></td></tr><tr><td>0到1之间的随机数</td><td>Math.random()</td><td></td></tr><tr><td>判断是正数还是负数</td><td>Math.sign($x$)</td><td>返回值为1则为整x数, -1则为负数, 0则为0. 该方法也可以判断字符串形式的数字.</td></tr><tr><td>四舍五入</td><td>Math.round($x$)</td><td></td></tr><tr><td>平方根</td><td>Math.sqrt($x$)</td><td></td></tr></tbody></table><h2 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h2><p>可以通过创建日期对象的实例来处理日期和时间. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 当前时间, 不传入参数时会生成系统的当前时间</span></span><br><span class="line"><span class="keyword">var</span> current_date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">// 2. 传入特定时间的字符串生成特定时间, 字符串结构为 &#x27;YYYY-MM-DD HH:MM:SS&#x27;</span></span><br><span class="line"><span class="keyword">var</span> specific_date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-10-1 8:8:8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在创建事件对象之后, 我们就可以使用一些内置的方法获取更具体的信息:</p><table><thead><tr><th>方法</th><th>调用</th><th>说明</th></tr></thead><tbody><tr><td>获取年份</td><td>Date.getFullYear();</td><td></td></tr><tr><td>获取月份</td><td>Date.getMonth()</td><td>返回值为[0, 11]之间的整数, 比实际月份小1.</td></tr><tr><td>获取日份</td><td>Date.getDate()</td><td></td></tr><tr><td>获取星期信息</td><td>Date.getDay()</td><td>返回值为[1, 6] 之间的整数. 星期日为0, 星期一为1, 星期二为2…</td></tr><tr><td>获取小时</td><td>Date.getHours()</td><td></td></tr><tr><td>获取分钟</td><td>Date.getMinutes()</td><td></td></tr></tbody></table><h2 id="Array-数组对象"><a href="#Array-数组对象" class="headerlink" title="Array 数组对象"></a>Array 数组对象</h2><p>数组对象提供一些内置的属性和方法帮我们操作数组.</p><p>内置属性:</p><table><thead><tr><th>属性</th><th>调用</th><th>说明</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>内置方法:</p><table><thead><tr><th>方法</th><th>调用</th><th>说明</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分类和预测</title>
      <link href="/2022/01/01/%E5%88%86%E7%B1%BB%E5%92%8C%E9%A2%84%E6%B5%8B/"/>
      <url>/2022/01/01/%E5%88%86%E7%B1%BB%E5%92%8C%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>Classification</strong> 指创建模型 (这种模型又被成为classifier), 然后对unseen data进行分类. </p><h1 id="Cassifier的类型"><a href="#Cassifier的类型" class="headerlink" title="Cassifier的类型"></a>Cassifier的类型</h1><h2 id="Decision-Tree-Induction"><a href="#Decision-Tree-Induction" class="headerlink" title="Decision Tree Induction"></a>Decision Tree Induction</h2><p>A decision tree classifies labelled data by applying a sequence of logical tests on attributes that partition the data into finer and finer sets. The model that is learnt is a tree of logical tests.</p><p>最基本的Decision Tree Induction 算法: </p><ul><li>At the <strong>start,</strong> all the training examples (tuples) are at the root node.</li><li>At a node, <strong>test attributes are selected</strong> on the basis of a heuristic or statistical measure (比如 information gain).</li><li>Nodes are <strong>partitioned</strong> to sub-nodes based on selected attributes.</li><li><strong>Recurse</strong> over subnodes.</li><li>Paritioning <strong>stops</strong> when:<ul><li>All samples for a given node belong to the same class; or</li><li>There are no remaining attributes for further partitioning – majority voting is employed for classifying the leaf; or</li><li>There are no samples lef</li></ul></li></ul><h3 id="Attribute-Selection-Methods"><a href="#Attribute-Selection-Methods" class="headerlink" title="Attribute Selection Methods"></a>Attribute Selection Methods</h3><p>选择分割node时所用的方法, 所以又叫做splitting rules</p>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
          <category> 数据挖掘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Classification </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
